Index: src/main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.io.*;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.*;\r\nimport java.text.ParseException;\r\n\r\nclass Requisito {\r\n    private String descricao;\r\n    private String classificacao;\r\n    private Date dataRevisao;\r\n\r\n    public Requisito(String descricao, String classificacao, Date dataRevisao) {\r\n        this.descricao = descricao;\r\n        this.classificacao = classificacao;\r\n        this.dataRevisao = dataRevisao;\r\n    }\r\n\r\n    public String getDescricao() {\r\n        return descricao;\r\n    }\r\n\r\n    public String getClassificacao() {\r\n        return classificacao;\r\n    }\r\n\r\n    public Date getDataRevisao() {\r\n        return dataRevisao;\r\n    }\r\n\r\n    public void setDescricao(String descricao) {\r\n        this.descricao = descricao;\r\n    }\r\n\r\n    public void setClassificacao(String classificacao) {\r\n        this.classificacao = classificacao;\r\n    }\r\n\r\n    public void setDataRevisao(Date dataRevisao) {\r\n        this.dataRevisao = dataRevisao;\r\n    }\r\n}\r\n\r\npublic class main {\r\n    public static void main(String[] args) {\r\n        List<Requisito> requisitos = new ArrayList<>();\r\n        Scanner scanner = new Scanner(System.in);\r\n\r\n        // Carregando requisitos a partir de um arquivo CSV (se existir)\r\n        carregarRequisitos(requisitos);\r\n\r\n        boolean loop = true;\r\n        while (loop) {\r\n            System.out.println(\"Escolha uma opção:\");\r\n            System.out.println(\"1 - Visualizar requisitos\");\r\n            System.out.println(\"2 - Adicionar requisito não conforme\");\r\n            System.out.println(\"3 - Editar requisito não conforme\");\r\n            System.out.println(\"4 - Sair\");\r\n            System.out.print(\"Opção: \");\r\n            int op = scanner.nextInt();\r\n\r\n            switch (op){\r\n                case 1:\r\n                    visualizarRequisitos(requisitos);\r\n                    break;\r\n                case 2:\r\n                    adicionarRequisito(scanner, requisitos);\r\n                    break;\r\n                case 3:\r\n                    editarRequisito(scanner, requisitos);\r\n                    break;\r\n                case 4:\r\n                salvarRequisitos(requisitos);\r\n                System.out.println(\"Saindo do programa. Requisitos salvos.\");\r\n                loop = false;\r\n                break;\r\n                default:\r\n                    System.out.println(\"Opção inválida. Tente novamente.\");\r\n            }\r\n        }\r\n    }\r\n\r\n    private static void carregarRequisitos(List<Requisito> requisitos) {\r\n        try (BufferedReader reader = new BufferedReader(new FileReader(\"requisitos.csv\"))) {\r\n            String line;\r\n            while ((line = reader.readLine()) != null) {\r\n                String[] parts = line.split(\",\");\r\n                if (parts.length == 3) {\r\n                    String descricao = parts[0];\r\n                    String classificacao = parts[1];\r\n                    Date dataRevisao = new SimpleDateFormat(\"yyyy-MM-dd\").parse(parts[2]);\r\n                    requisitos.add(new Requisito(descricao, classificacao, dataRevisao));\r\n                }\r\n            }\r\n        } catch (FileNotFoundException e) {\r\n            // Arquivo não existe (não é um erro)\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    private static void salvarRequisitos(List<Requisito> requisitos) {\r\n        try (PrintWriter writer = new PrintWriter(new FileWriter(\"requisitos.csv\"))) {\r\n            for (Requisito requisito : requisitos) {\r\n                String linha = requisito.getDescricao() + \",\" + requisito.getClassificacao() + \",\" +\r\n                        new SimpleDateFormat(\"yyyy-MM-dd\").format(requisito.getDataRevisao());\r\n                writer.println(linha);\r\n            }\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    private static void visualizarRequisitos(List<Requisito> requisitos) {\r\n        for (Requisito requisito : requisitos) {\r\n            System.out.println(\"Descrição: \" + requisito.getDescricao());\r\n            System.out.println(\"Classificação: \" + requisito.getClassificacao());\r\n            System.out.println(\"Data até próxima revisão: \" + new SimpleDateFormat(\"dd/MM/yyyy\").format(requisito.getDataRevisao()));\r\n            System.out.println();\r\n        }\r\n    }\r\n\r\n    private static void adicionarRequisito(Scanner scanner, List<Requisito> requisitos) {\r\n        Scanner teclado = new Scanner(System.in);\r\n        scanner.nextLine(); // Consumir a nova linha pendente\r\n        int conf;\r\n        int taxa = 0;\r\n        int total = 0;\r\n        for (int i = 0; i <=14; i++){\r\n            //System.out.println(pergunta do checklist);\r\n            System.out.println(\"O Resultado esperado está conforme? (1 para sim, 2 para não)\");\r\n            conf = Integer.parseInt(teclado.nextLine());\r\n            switch (conf){\r\n                case 1:\r\n                    System.out.println(\"\");\r\n                    taxa += 1;\r\n                    break;\r\n                case 2:\r\n                    System.out.print(\"Descrição do requisito não conforme: \");\r\n                    String descricao = scanner.nextLine();\r\n                    System.out.print(\"Classificação do requisito não conforme (Alta - 5 dias/Média - 3 dias/Baixa - 1 dia): \");\r\n                    String classificacao = scanner.nextLine();\r\n                    System.out.print(\"Data até próxima revisão (formato dd/MM/yyyy): \");\r\n                    try {\r\n                        Date dataRevisao = new SimpleDateFormat(\"dd/MM/yyyy\").parse(scanner.nextLine());\r\n                        requisitos.add(new Requisito(descricao, classificacao, dataRevisao));\r\n                        System.out.println(\"Requisito não conforme adicionado com sucesso.\");\r\n                    } catch (ParseException e) {\r\n                        System.out.println(\"Formato de data inválido. O requisito não será adicionado.\");\r\n                    }\r\n            }\r\n            total += 1;\r\n        }\r\n        System.out.println(\"A taxa de aderência é :\" + ((taxa/total))/100 +\"%\");\r\n    }\r\n\r\n    private static void editarRequisito(Scanner scanner, List<Requisito> requisitos) {\r\n        System.out.print(\"Informe a descrição do requisito a ser editado: \");\r\n        String descricao = scanner.next();\r\n        boolean encontrado = false;\r\n        for (Requisito requisito : requisitos) {\r\n            if (requisito.getDescricao().equals(descricao)) {\r\n                encontrado = true;\r\n                scanner.nextLine(); // Consumir a nova linha pendente\r\n                System.out.print(\"Nova descrição (ou pressione Enter para manter a atual): \");\r\n                String novaDescricao = scanner.nextLine();\r\n                if (!novaDescricao.isEmpty()) {\r\n                    requisito.setDescricao(novaDescricao);\r\n                }\r\n                System.out.print(\"Nova classificação (Alta/Média/Baixa ou pressione Enter para manter a atual): \");\r\n                String novaClassificacao = scanner.nextLine();\r\n                if (!novaClassificacao.isEmpty()) {\r\n                    requisito.setClassificacao(novaClassificacao);\r\n                }\r\n                System.out.print(\"Nova data até próxima revisão (formato dd/MM/yyyy ou pressione Enter para manter a atual): \");\r\n                String novaData = scanner.nextLine();\r\n                if (!novaData.isEmpty()) {\r\n                    try {\r\n                        Date dataRevisao = new SimpleDateFormat(\"dd/MM/yyyy\").parse(novaData);\r\n                        requisito.setDataRevisao(dataRevisao);\r\n                    } catch (ParseException e) {\r\n                        System.out.println(\"Formato de data inválido. Os dados não foram atualizados.\");\r\n                    }\r\n                }\r\n                System.out.println(\"Requisito editado com sucesso.\");\r\n                break;\r\n            }\r\n        }\r\n        if (!encontrado) {\r\n            System.out.println(\"Requisito não encontrado.\");\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main.java b/src/main.java
--- a/src/main.java	(revision 34d0eea69a13dc5a7b77bfd344c762d170034677)
+++ b/src/main.java	(date 1698670486548)
@@ -122,8 +122,6 @@
         Scanner teclado = new Scanner(System.in);
         scanner.nextLine(); // Consumir a nova linha pendente
         int conf;
-        int taxa = 0;
-        int total = 0;
         for (int i = 0; i <=14; i++){
             //System.out.println(pergunta do checklist);
             System.out.println("O Resultado esperado está conforme? (1 para sim, 2 para não)");
@@ -131,7 +129,6 @@
             switch (conf){
                 case 1:
                     System.out.println("");
-                    taxa += 1;
                     break;
                 case 2:
                     System.out.print("Descrição do requisito não conforme: ");
@@ -147,9 +144,7 @@
                         System.out.println("Formato de data inválido. O requisito não será adicionado.");
                     }
             }
-            total += 1;
         }
-        System.out.println("A taxa de aderência é :" + ((taxa/total))/100 +"%");
     }
 
     private static void editarRequisito(Scanner scanner, List<Requisito> requisitos) {
Index: out/production/NFCGP7/.idea/NFCGP7.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<module type=\"JAVA_MODULE\" version=\"4\">\r\n  <component name=\"NewModuleRootManager\" inherit-compiler-output=\"true\">\r\n    <exclude-output />\r\n    <content url=\"file://$MODULE_DIR$\">\r\n      <sourceFolder url=\"file://$MODULE_DIR$\" isTestSource=\"false\" />\r\n    </content>\r\n    <orderEntry type=\"inheritedJdk\" />\r\n    <orderEntry type=\"sourceFolder\" forTests=\"false\" />\r\n  </component>\r\n</module>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/out/production/NFCGP7/.idea/NFCGP7.iml b/out/production/NFCGP7/.idea/NFCGP7.iml
--- a/out/production/NFCGP7/.idea/NFCGP7.iml	(revision 34d0eea69a13dc5a7b77bfd344c762d170034677)
+++ b/out/production/NFCGP7/.idea/NFCGP7.iml	(date 1698665068648)
@@ -4,6 +4,7 @@
     <exclude-output />
     <content url="file://$MODULE_DIR$">
       <sourceFolder url="file://$MODULE_DIR$" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
     </content>
     <orderEntry type="inheritedJdk" />
     <orderEntry type="sourceFolder" forTests="false" />
